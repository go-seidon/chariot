// Code generated by MockGen. DO NOT EDIT.
// Source: internal/queueing/exchange.go

// Package mock_queueing is a generated GoMock package.
package mock_queueing

import (
	context "context"
	reflect "reflect"

	queueing "github.com/go-seidon/chariot/internal/queueing"
	gomock "github.com/golang/mock/gomock"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// BindQueue mocks base method.
func (m *MockExchange) BindQueue(ctx context.Context, p queueing.BindQueueParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQueue", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQueue indicates an expected call of BindQueue.
func (mr *MockExchangeMockRecorder) BindQueue(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQueue", reflect.TypeOf((*MockExchange)(nil).BindQueue), ctx, p)
}

// DeclareExchange mocks base method.
func (m *MockExchange) DeclareExchange(ctx context.Context, p queueing.DeclareExchangeParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareExchange", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareExchange indicates an expected call of DeclareExchange.
func (mr *MockExchangeMockRecorder) DeclareExchange(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareExchange", reflect.TypeOf((*MockExchange)(nil).DeclareExchange), ctx, p)
}
