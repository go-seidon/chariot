// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/file.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-seidon/chariot/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFile) CreateFile(ctx context.Context, p repository.CreateFileParam) (*repository.CreateFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, p)
	ret0, _ := ret[0].(*repository.CreateFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileMockRecorder) CreateFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFile)(nil).CreateFile), ctx, p)
}

// FindFile mocks base method.
func (m *MockFile) FindFile(ctx context.Context, p repository.FindFileParam) (*repository.FindFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFile", ctx, p)
	ret0, _ := ret[0].(*repository.FindFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFile indicates an expected call of FindFile.
func (mr *MockFileMockRecorder) FindFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFile", reflect.TypeOf((*MockFile)(nil).FindFile), ctx, p)
}

// SearchFile mocks base method.
func (m *MockFile) SearchFile(ctx context.Context, p repository.SearchFileParam) (*repository.SearchFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFile", ctx, p)
	ret0, _ := ret[0].(*repository.SearchFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFile indicates an expected call of SearchFile.
func (mr *MockFileMockRecorder) SearchFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFile", reflect.TypeOf((*MockFile)(nil).SearchFile), ctx, p)
}

// SearchLocation mocks base method.
func (m *MockFile) SearchLocation(ctx context.Context, p repository.SearchLocationParam) (*repository.SearchLocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLocation", ctx, p)
	ret0, _ := ret[0].(*repository.SearchLocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLocation indicates an expected call of SearchLocation.
func (mr *MockFileMockRecorder) SearchLocation(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLocation", reflect.TypeOf((*MockFile)(nil).SearchLocation), ctx, p)
}

// UpdateFile mocks base method.
func (m *MockFile) UpdateFile(ctx context.Context, p repository.UpdateFileParam) (*repository.UpdateFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", ctx, p)
	ret0, _ := ret[0].(*repository.UpdateFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileMockRecorder) UpdateFile(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFile)(nil).UpdateFile), ctx, p)
}

// UpdateLocationByIds mocks base method.
func (m *MockFile) UpdateLocationByIds(ctx context.Context, p repository.UpdateLocationByIdsParam) (*repository.UpdateLocationByIdsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocationByIds", ctx, p)
	ret0, _ := ret[0].(*repository.UpdateLocationByIdsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocationByIds indicates an expected call of UpdateLocationByIds.
func (mr *MockFileMockRecorder) UpdateLocationByIds(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocationByIds", reflect.TypeOf((*MockFile)(nil).UpdateLocationByIds), ctx, p)
}
